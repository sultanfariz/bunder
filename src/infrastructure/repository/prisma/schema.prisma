// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native","linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

enum SwipeDirection {
  LEFT
  RIGHT
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id        Int     @id @default(autoincrement())
  email     String  @unique
  name      String
  birthdate DateTime
  password  String
  photoUrls String
  gender    Gender
  location  String
  bio       String?
  hobbies   String?

  preference Preference? @relation(name: "user")
  swipes    Swipe[] @relation(name: "user")
  candidates Swipe[] @relation(name: "candidate")
  sentMessages Message[] @relation(name: "sender")
  receivedMessages Message[] @relation(name: "receiver")
  subscription Subscription? @relation(name: "user")
}

model Package {
  id           Int    @id @default(autoincrement())
  name         String
  swipeQuota   Int
  verifiedLabel Boolean

  subscriptions Subscription[] @relation(name: "package")
}

model Subscription {
  id           Int    @id @default(autoincrement())
  packageId    Int
  userId       Int    @unique
  startDate    DateTime
  endDate      DateTime?

  user        User @relation(fields: [userId], references: [id], name: "user")
  package     Package @relation(fields: [packageId], references: [id], name: "package")
}

model Swipe {
  id          Int     @id @default(autoincrement())
  userId      Int
  candidateId Int
  timestamp   DateTime
  swipe       SwipeDirection

  user        User    @relation(fields: [userId], references: [id], name: "user")
  candidate   User    @relation(fields: [candidateId], references: [id], name: "candidate")
}

model Match {
  id        Int     @id @default(autoincrement())
  firstId   Int
  secondId  Int
  timestamp DateTime

  messages Message[] @relation(name: "match")
}

model Message {
  id         Int     @id @default(autoincrement())
  matchId    Int
  senderId   Int
  receiverId Int
  content    String
  isRead     Boolean
  timestamp  DateTime

  match      Match @relation(fields: [matchId], references: [id], name: "match")
  sender     User @relation(name: "sender", fields: [senderId], references: [id])
  receiver   User @relation(name: "receiver", fields: [receiverId], references: [id])
}

model Preference {
  id          Int    @id @default(autoincrement())
  userId      Int    @unique
  minAge      Int
  maxAge      Int
  maxDistance Int

  user        User @relation(fields: [userId], references: [id], name: "user")
}